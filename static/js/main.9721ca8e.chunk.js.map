{"version":3,"sources":["constants/Notes.js","Fret.js","String.js","Neckboard.js","constants/Chords.js","constants/Scales.js","App.js","serviceWorker.js","index.js"],"names":["Notes","getNoteByName","name","octave","arguments","length","undefined","goToIntervalAfter","interval","rootNote","rootNoteIndex","indexOf","Object","objectSpread","Fret","_this$props","this","props","note","checked","react_default","a","createElement","className","concat","type","Component","defaultProps","String","notes","map","index","src_Fret","key","fretNumber","Neckboard","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","neckboard","startNote","lastFret","string","i","push","neckboardSchemas","_this2","strings","firstNote","buildString","fretsPerString","setState","buildNeckboard","stringNotes","src_String","chordsTypesIntervals","intervals","scalesTypesIntervals","App","console","log","chordName","chord","find","chordType","forEach","getChordFromRoot","scaleName","scale","currentNote","scaleType","getScaleNotesFromRoot","src_Neckboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9721ca8e.chunk.js","sourcesContent":["const Notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\nexport function getNotesName() {\n  return Notes;\n}\n\nexport function getNoteByName(name, octave = 0) {\n  return { name, octave };\n}\n\n/**\n * Get the note from the root + interval\n * @param {number} interval\n * @param {object} rootNote\n * @returns Note\n */\nexport function goToIntervalAfter(interval, rootNote) {\n  const rootNoteIndex = Notes.indexOf(rootNote.name);\n\n  if (rootNoteIndex + interval > Notes.length - 1) {\n    /*\n    Since Notes array starts on a C,\n    we can tell that we are in the superior octave\n    when when loop at the beginning of it\n    */\n    return {\n      name: Notes[rootNoteIndex + interval - Notes.length],\n      octave: rootNote.octave + 1\n    };\n  } else {\n    return { ...rootNote, name: Notes[rootNoteIndex + interval] };\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Fret extends Component {\n  static propTypes = {\n    note: PropTypes.object,\n    checked: PropTypes.bool\n  };\n\n  static defaultProps = {\n    checked: false\n  };\n\n  render() {\n    const { note, checked } = this.props;\n    return (\n      <div className={`fret${checked ? \" checked\" : \"\"}`}>\n        <div className=\"note\">{note.name}</div>\n        <div>\n          <input\n            type=\"checkbox\"\n            name={`${note.name}${note.octave}`}\n            checked={checked}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Fret;\n","import React, { Component } from \"react\";\nimport Fret from \"./Fret\";\n\nclass String extends Component {\n  render() {\n    return (\n      <div className=\"string\">\n        {this.props.notes.map((note, index) => (\n          <Fret\n            key={`${note.name}${note.octave}-fret`}\n            note={note}\n            fretNumber={index}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default String;\n","import React, { Component } from \"react\";\nimport { goToIntervalAfter } from \"./constants/Notes\";\nimport String from \"./String\";\n\nclass Neckboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      neckboard: []\n    };\n  }\n\n  /**\n   * Build an array with all notes between start and lastFret\n   *\n   * @param {string} startNote\n   * @param {number} lastFret\n   *\n   * @returns {Array} The string containing all notes\n   */\n  buildString(startNote, lastFret) {\n    const string = [startNote];\n\n    for (let i = 0; i < lastFret; i++) {\n      string.push(goToIntervalAfter(1, string[i]));\n    }\n\n    return string;\n  }\n\n  buildNeckboard(neckboardSchemas) {\n    return neckboardSchemas.strings.map(firstNote =>\n      this.buildString(firstNote, neckboardSchemas.fretsPerString)\n    );\n  }\n\n  componentDidMount() {\n    this.setState({\n      neckboard: this.buildNeckboard(this.props.neckboardSchemas)\n    });\n  }\n\n  render() {\n    const { neckboard } = this.state;\n    return (\n      <div className=\"neckboard\">\n        {neckboard.map(stringNotes => (\n          <String\n            key={`${stringNotes[0].name}${stringNotes[0].octave}-string`}\n            notes={stringNotes}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Neckboard;\n","import { goToIntervalAfter } from \"./Notes\";\n\nconst chordsTypesIntervals = [\n  {\n    name: \"major\",\n    intervals: [4, 7, 11]\n  },\n  {\n    name: \"dominant\",\n    intervals: [4, 7, 10]\n  },\n  {\n    name: \"minor\",\n    intervals: [3, 7, 10]\n  }\n];\n\n/**\n * Get all notes of a chords based on root note\n * @param {object} rootNote\n * @param {string} chordName [major | dominant | minor]\n *\n * @return Chord note composition\n */\nexport function getChordFromRoot(rootNote, chordName) {\n  const chord = [rootNote];\n  chordsTypesIntervals\n    .find(chordType => chordType.name === chordName)\n    .intervals.forEach(interval =>\n      chord.push(goToIntervalAfter(interval, rootNote))\n    );\n\n  return chord;\n}\n","import { goToIntervalAfter } from \"./Notes\";\n\nconst scalesTypesIntervals = [\n  {\n    name: \"major\",\n    intervals: [2, 2, 1, 2, 2, 2, 1]\n  },\n  {\n    name: \"minor\",\n    intervals: [2, 1, 2, 2, 1, 2, 2]\n  }\n];\n\n/**\n * Get all notes of a chords based on root note\n * @param {object} rootNote\n * @param {string} scaleName [major | minor]\n *\n * @return Scale note composition\n */\nexport function getScaleNotesFromRoot(rootNote, scaleName) {\n  const scale = [rootNote];\n  let currentNote = rootNote;\n  scalesTypesIntervals\n    .find(scaleType => scaleType.name === scaleName)\n    .intervals.forEach(interval => {\n      currentNote = goToIntervalAfter(interval, currentNote);\n      scale.push(currentNote);\n    });\n\n  return scale;\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Neckboard from \"./Neckboard\";\nimport { getChordFromRoot } from \"./constants/Chords\";\nimport { getNoteByName } from \"./constants/Notes\";\nimport { getScaleNotesFromRoot } from \"./constants/Scales\";\n\nclass App extends Component {\n  componentDidMount() {\n    console.log(getChordFromRoot(getNoteByName(\"C\"), \"major\"));\n    console.log(getScaleNotesFromRoot(getNoteByName(\"C\"), \"major\"));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"chordToGuess\">\n          <span>\n            Chord to guess : <b>C Maj</b>\n          </span>\n        </div>\n\n        <form>\n          <Neckboard\n            neckboardSchemas={{\n              fretsPerString: 12,\n              strings: [\n                { name: \"G\", octave: 2 },\n                { name: \"D\", octave: 2 },\n                { name: \"A\", octave: 1 },\n                { name: \"E\", octave: 1 }\n              ]\n            }}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}