{"version":3,"sources":["helpers/Notes.js","Fret.js","String.js","Fretboard.js","helpers/Chords.js","helpers/Scales.js","App.js","serviceWorker.js","index.js"],"names":["Notes","createNote","name","octave","checked","arguments","length","undefined","getNoteByName","goToIntervalAfter","interval","rootNote","rootNoteIndex","indexOf","Fret","handleChange","_this","props","selectNote","fret","_this$props","this","hintEnabled","react_default","a","createElement","className","concat","onClick","note","type","onChange","Component","defaultProps","console","warn","String","frets","map","index","src_Fret","key","fretNumber","Fretboard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updatedFretboard","state","fretboard","string","equals","objectSpread","setState","userResponses","uniq","toConsumableArray","startNote","lastFret","i","nextNote","push","neckboardSchemas","_this2","strings","firstNote","buildString","fretsPerString","buildFretboard","prevProps","notesToDisplay","find","_this3","_this$state","src_String","join","defaulProps","chordsTypesIntervals","intervals","getChordFromRoot","chordName","chord","chordType","forEach","scalesTypesIntervals","App","chordToDisplay","showChord","cleanAll","log","scaleName","scale","currentNote","scaleType","getScaleNotesFromRoot","src_Fretboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAAMA,EAAQ,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAEpE,SAASC,EAAWC,EAAMC,GAC/B,MAAO,CACLD,OACAC,SACAC,QAJsDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,IAYnD,SAASG,EAAcN,GAC5B,MAAO,CAAEA,OAAMC,OAD+BE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,GAUtC,SAASI,EAAkBC,EAAUC,GAC1C,IAAMC,EAAgBZ,EAAMa,QAAQF,EAAST,MAE7C,OAAIU,EAAgBF,EAAWV,EAAMM,OAAS,EAMrCL,EACLD,EAAMY,EAAgBF,EAAWV,EAAMM,QACvCK,EAASR,OAAS,GAGbF,EAAWD,EAAMY,EAAgBF,GAAWC,EAASR,YCnC1DW,6MAeJC,aAAe,WACbC,EAAKC,MAAMC,WAAWF,EAAKC,MAAME,+EAG1B,IAAAC,EACgCC,KAAKJ,MAApCE,EADDC,EACCD,KAAMf,EADPgB,EACOhB,QAASkB,EADhBF,EACgBE,YACvB,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAS,OAAAC,OAASvB,EAAU,WAAa,IAAhCuB,OACPL,EAAc,QAAU,IAE1BM,QAASP,KAAKN,cAEdQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQP,EAAKU,KAAK3B,MACjCqB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEK,KAAK,WACL5B,KAAI,GAAAyB,OAAKR,EAAKU,KAAK3B,MAAfyB,OAAsBR,EAAKU,KAAK1B,QACpCC,QAASA,EACT2B,SAAUV,KAAKN,wBAlCRiB,aAAblB,EAQGmB,aAAe,CACpB7B,SAAS,EACTc,WAAY,WACVgB,QAAQC,KAAK,4DA+BJrB,QChBAsB,mLAnBJ,IAAAhB,EACuBC,KAAKJ,MAA3BC,EADDE,EACCF,WADDE,EACaiB,MACpB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZL,KAAKJ,MAAMoB,MAAMC,IAAI,SAACnB,EAAMoB,GAAP,OACpBhB,EAAAC,EAAAC,cAACe,EAAD,CACEC,IAAG,GAAAd,OAAKR,EAAKU,KAAK3B,MAAfyB,OAAsBR,EAAKU,KAAK1B,OAAhC,SACHgB,KAAMA,EACNuB,WAAYH,EACZnC,QAASe,EAAKf,QACdkB,YAAaH,EAAKG,YAClBJ,WAAYA,cAjBHc,6BCEfW,cASJ,SAAAA,EAAY1B,GAAO,IAAAD,EAAA,OAAA4B,OAAAC,EAAA,EAAAD,CAAAvB,KAAAsB,IACjB3B,EAAA4B,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA3B,KAAMJ,KAwCRC,WAAa,SAAAW,GAAQ,IAGboB,EAFgBjC,EAAKkC,MAAnBC,UAE2Bb,IAAI,SAAAc,GACrC,OAAOA,EAAOd,IAAI,SAAAnB,GAChB,IAAMf,EAAUiD,YAAOlC,EAAMU,IAASV,EAAKf,QAAUe,EAAKf,QAC1D,OAAOwC,OAAAU,EAAA,EAAAV,CAAA,GACFzB,EADL,CAEEf,gBAKNY,EAAKuC,SAAS,CACZJ,UAAWF,EACXO,cAAeC,YAAI,GAAA9B,OAAAiB,OAAAc,EAAA,EAAAd,CAAK5B,EAAKkC,MAAMM,eAAhB,CAA+B3B,EAAKA,KAAK3B,WAtD9Dc,EAAKkC,MAAQ,CACXC,UAAW,GACXK,cAAe,IAJAxC,2EAgBP2C,EAAWC,GAKrB,IAJA,IAAMR,EAAS,CACb,CAAEvB,KAAM5B,EAAW0D,EAAUzD,KAAMyD,EAAUxD,QAASiD,OAAQO,IAGvDE,EAAI,EAAGA,EAAID,EAAUC,IAAK,CACjC,IAAMC,EAAWrD,EAAkB,EAAG2C,EAAOS,GAAGhC,MAChDuB,EAAOW,KAAK,CAAElC,KAAMiC,EAAUV,OAAQO,IAGxC,OAAOP,yCAGMY,GAAkB,IAAAC,EAAA5C,KAC/B,OAAO2C,EAAiBE,QAAQ5B,IAAI,SAAA6B,GAAS,OAC3CF,EAAKG,YAAYD,EAAWH,EAAiBK,8DAK/ChD,KAAKkC,SAAS,CACZJ,UAAW9B,KAAKiD,eAAejD,KAAKJ,MAAM+C,+DAuB3BO,GAAW,IACpBC,EAAmBnD,KAAKJ,MAAxBuD,eACArB,EAAc9B,KAAK6B,MAAnBC,UACR,GACEqB,EAAelE,QACfkE,EAAelE,SAAWiE,EAAUC,eAAelE,OACnD,CACA,IAAM2C,EAAmBE,EAAUb,IAAI,SAAAc,GACrC,OAAOA,EAAOd,IAAI,SAAAnB,GAChB,OAAOyB,OAAAU,EAAA,EAAAV,CAAA,GACFzB,EADL,CAEEG,cAAekD,EAAeC,KAC5B,SAAA5C,GAAI,OAAIA,EAAK3B,OAASiB,EAAKU,KAAK3B,aAKxCmB,KAAKkC,SAAS,CACZJ,UAAWF,sCAKR,IAAAyB,EAAArD,KAAAsD,EAC8BtD,KAAK6B,MAAlCC,EADDwB,EACCxB,UAAWK,EADZmB,EACYnB,cAEnB,OACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZyB,EAAUb,IAAI,SAAAc,GAAM,OACnB7B,EAAAC,EAAAC,cAACmD,EAAD,CACEnC,IAAG,GAAAd,OAAKyB,EAAO,GAAGvB,KAAK3B,MAApByB,OAA2ByB,EAAO,GAAGvB,KAAK1B,OAA1C,WACHkC,MAAOe,EACPlC,WAAYwD,EAAKxD,kBAKpBsC,EAAclD,QACfiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,YAAO+B,EAAcqB,KAAK,eA9Gd7C,aAAlBW,EAKGmC,YAAc,CACnBN,eAAgB,IAgHL7B,QC1HToC,EAAuB,CAC3B,CACE7E,KAAM,QACN8E,UAAW,CAAC,EAAG,EAAG,KAEpB,CACE9E,KAAM,WACN8E,UAAW,CAAC,EAAG,EAAG,KAEpB,CACE9E,KAAM,QACN8E,UAAW,CAAC,EAAG,EAAG,MAWf,SAASC,EAAiBtE,EAAUuE,GACzC,IAAMC,EAAQ,CAAClF,EAAWU,EAAST,KAAMS,EAASR,SAOlD,OANA4E,EACGN,KAAK,SAAAW,GAAS,OAAIA,EAAUlF,OAASgF,IACrCF,UAAUK,QAAQ,SAAA3E,GAAQ,OACzByE,EAAMpB,KAAKtD,EAAkBC,EAAUC,MAGpCwE,EC9BT,IAAMG,EAAuB,CAC3B,CACEpF,KAAM,QACN8E,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEhC,CACE9E,KAAM,QACN8E,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,SC0DnBO,6MA1DbrC,MAAQ,CACNsC,eAAgB,MAQlBC,UAAY,WACVzE,EAAKuC,SAAS,CACZiC,eAAgBP,EAAiBzE,EAAc,KAAM,cAIzDkF,SAAW,WACT1E,EAAKuC,SAAS,CACZiC,eAAgB,yFAZlBtD,QAAQyD,IAAIV,EAAiBzE,EAAc,KAAM,UACjD0B,QAAQyD,IDKL,SAA+BhF,EAAUiF,GAC9C,IAAMC,EAAQ,CAAC5F,EAAWU,EAAST,KAAMS,EAASR,SAC9C2F,EAAcnF,EAQlB,OAPA2E,EACGb,KAAK,SAAAsB,GAAS,OAAIA,EAAU7F,OAAS0F,IACrCZ,UAAUK,QAAQ,SAAA3E,GACjBoF,EAAcrF,EAAkBC,EAAUoF,GAC1CD,EAAM9B,KAAK+B,KAGRD,ECfOG,CAAsBxF,EAAc,KAAM,2CAgBtD,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,gCACmBF,EAAAC,EAAAC,cAAA,oBAGrBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQG,QAASP,KAAKoE,WAAtB,WACUlE,EAAAC,EAAAC,cAAA,kBADV,WAIFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAQG,QAASP,KAAKqE,UAAtB,wBAGFnE,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACwE,EAAD,CACEjC,iBAAkB,CAChBK,eAAgB,GAChBH,QAAS,CACP,CAAEhE,KAAM,IAAKC,OAAQ,GACrB,CAAED,KAAM,IAAKC,OAAQ,GACrB,CAAED,KAAM,IAAKC,OAAQ,GACrB,CAAED,KAAM,IAAKC,OAAQ,KAGzBqE,eAAgBnD,KAAK6B,MAAMsC,iBAE7BjE,EAAAC,EAAAC,cAAA,UAAQK,KAAK,UAAb,mBApDQE,aCIEkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6cba6cd5.chunk.js","sourcesContent":["const Notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\nexport function createNote(name, octave, checked = false) {\n  return {\n    name,\n    octave,\n    checked\n  };\n}\n\nexport function getNotesName() {\n  return Notes;\n}\n\nexport function getNoteByName(name, octave = 0) {\n  return { name, octave };\n}\n\n/**\n * Get the note from the root + interval\n * @param {number} interval\n * @param {object} rootNote\n * @returns Note\n */\nexport function goToIntervalAfter(interval, rootNote) {\n  const rootNoteIndex = Notes.indexOf(rootNote.name);\n\n  if (rootNoteIndex + interval > Notes.length - 1) {\n    /*\n    Since Notes array starts on a C,\n    we can tell that we are in the superior octave\n    when when loop at the beginning of it\n    */\n    return createNote(\n      Notes[rootNoteIndex + interval - Notes.length],\n      rootNote.octave + 1\n    );\n  } else {\n    return createNote(Notes[rootNoteIndex + interval], rootNote.octave);\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Fret extends Component {\n  static propTypes = {\n    fret: PropTypes.object,\n    checked: PropTypes.bool,\n    hintEnabled: PropTypes.bool,\n    selectNote: PropTypes.func\n  };\n\n  static defaultProps = {\n    checked: false,\n    selectNote: () => {\n      console.warn(\"You MAY do something when user click on a fret right ?\");\n    }\n  };\n\n  handleChange = () => {\n    this.props.selectNote(this.props.fret);\n  };\n\n  render() {\n    const { fret, checked, hintEnabled } = this.props;\n    return (\n      <div\n        className={`fret${checked ? \" checked\" : \"\"}${\n          hintEnabled ? \" hint\" : \"\"\n        }`}\n        onClick={this.handleChange}\n      >\n        <div className=\"note\">{fret.note.name}</div>\n        <div>\n          <input\n            type=\"checkbox\"\n            name={`${fret.note.name}${fret.note.octave}`}\n            checked={checked}\n            onChange={this.handleChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Fret;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Fret from \"./Fret\";\n\nclass String extends Component {\n  static propTypes = {\n    frets: PropTypes.array,\n    selectNote: PropTypes.func\n  };\n\n  render() {\n    const { selectNote, frets } = this.props;\n    return (\n      <div className=\"string\">\n        {this.props.frets.map((fret, index) => (\n          <Fret\n            key={`${fret.note.name}${fret.note.octave}-fret`}\n            fret={fret}\n            fretNumber={index}\n            checked={fret.checked}\n            hintEnabled={fret.hintEnabled}\n            selectNote={selectNote}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default String;\n","import React, { Component } from \"react\";\nimport { createNote, goToIntervalAfter } from \"./helpers/Notes\";\nimport PropTypes from \"prop-types\";\nimport String from \"./String\";\nimport { equals, uniq } from \"ramda\";\n\nclass Fretboard extends Component {\n  static propTypes = {\n    notesToDisplay: PropTypes.array\n  };\n\n  static defaulProps = {\n    notesToDisplay: []\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fretboard: [],\n      userResponses: []\n    };\n  }\n\n  /**\n   * Build an array with all notes between start and lastFret\n   *\n   * @param {string} startNote\n   * @param {number} lastFret\n   *\n   * @returns {Array} The string containing all notes\n   */\n  buildString(startNote, lastFret) {\n    const string = [\n      { note: createNote(startNote.name, startNote.octave), string: startNote }\n    ];\n\n    for (let i = 0; i < lastFret; i++) {\n      const nextNote = goToIntervalAfter(1, string[i].note);\n      string.push({ note: nextNote, string: startNote });\n    }\n\n    return string;\n  }\n\n  buildFretboard(neckboardSchemas) {\n    return neckboardSchemas.strings.map(firstNote =>\n      this.buildString(firstNote, neckboardSchemas.fretsPerString)\n    );\n  }\n\n  componentDidMount() {\n    this.setState({\n      fretboard: this.buildFretboard(this.props.neckboardSchemas)\n    });\n  }\n\n  selectNote = note => {\n    const { fretboard } = this.state;\n\n    const updatedFretboard = fretboard.map(string => {\n      return string.map(fret => {\n        const checked = equals(fret, note) ? !fret.checked : fret.checked;\n        return {\n          ...fret,\n          checked\n        };\n      });\n    });\n\n    this.setState({\n      fretboard: updatedFretboard,\n      userResponses: uniq([...this.state.userResponses, note.note.name])\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    const { notesToDisplay } = this.props;\n    const { fretboard } = this.state;\n    if (\n      notesToDisplay.length &&\n      notesToDisplay.length !== prevProps.notesToDisplay.length\n    ) {\n      const updatedFretboard = fretboard.map(string => {\n        return string.map(fret => {\n          return {\n            ...fret,\n            hintEnabled: !!notesToDisplay.find(\n              note => note.name === fret.note.name\n            )\n          };\n        });\n      });\n      this.setState({\n        fretboard: updatedFretboard\n      });\n    }\n  }\n\n  render() {\n    const { fretboard, userResponses } = this.state;\n\n    return (\n      <div>\n        <div className=\"fretboard\">\n          {fretboard.map(string => (\n            <String\n              key={`${string[0].note.name}${string[0].note.octave}-string`}\n              frets={string}\n              selectNote={this.selectNote}\n            />\n          ))}\n        </div>\n\n        {!!userResponses.length && (\n          <div className=\"userResponse\">\n            <span>You've selected : </span>\n            <span>{userResponses.join(\",\")}</span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Fretboard;\n","import { goToIntervalAfter, createNote } from \"./Notes\";\n\nconst chordsTypesIntervals = [\n  {\n    name: \"major\",\n    intervals: [4, 7, 11]\n  },\n  {\n    name: \"dominant\",\n    intervals: [4, 7, 10]\n  },\n  {\n    name: \"minor\",\n    intervals: [3, 7, 10]\n  }\n];\n\n/**\n * Get all notes of a chords based on root note\n * @param {object} rootNote\n * @param {string} chordName [major | dominant | minor]\n *\n * @return Chord note composition\n */\nexport function getChordFromRoot(rootNote, chordName) {\n  const chord = [createNote(rootNote.name, rootNote.octave)];\n  chordsTypesIntervals\n    .find(chordType => chordType.name === chordName)\n    .intervals.forEach(interval =>\n      chord.push(goToIntervalAfter(interval, rootNote))\n    );\n\n  return chord;\n}\n","import { goToIntervalAfter, createNote } from \"./Notes\";\n\nconst scalesTypesIntervals = [\n  {\n    name: \"major\",\n    intervals: [2, 2, 1, 2, 2, 2, 1]\n  },\n  {\n    name: \"minor\",\n    intervals: [2, 1, 2, 2, 1, 2, 2]\n  }\n];\n\n/**\n * Get all notes of a chords based on root note\n * @param {object} rootNote\n * @param {string} scaleName [major | minor]\n *\n * @return Scale note composition\n */\nexport function getScaleNotesFromRoot(rootNote, scaleName) {\n  const scale = [createNote(rootNote.name, rootNote.octave)];\n  let currentNote = rootNote;\n  scalesTypesIntervals\n    .find(scaleType => scaleType.name === scaleName)\n    .intervals.forEach(interval => {\n      currentNote = goToIntervalAfter(interval, currentNote);\n      scale.push(currentNote);\n    });\n\n  return scale;\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Fretboard from \"./Fretboard\";\nimport { getChordFromRoot } from \"./helpers/Chords\";\nimport { getNoteByName } from \"./helpers/Notes\";\nimport { getScaleNotesFromRoot } from \"./helpers/Scales\";\n\nclass App extends Component {\n  state = {\n    chordToDisplay: []\n  };\n\n  componentDidMount() {\n    console.log(getChordFromRoot(getNoteByName(\"C\"), \"major\"));\n    console.log(getScaleNotesFromRoot(getNoteByName(\"C\"), \"major\"));\n  }\n\n  showChord = () => {\n    this.setState({\n      chordToDisplay: getChordFromRoot(getNoteByName(\"C\"), \"major\")\n    });\n  };\n\n  cleanAll = () => {\n    this.setState({\n      chordToDisplay: []\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"chordToGuess\">\n          <span>\n            Chord to guess : <b>C Maj</b>\n          </span>\n        </div>\n        <div className=\"showChord\">\n          <button onClick={this.showChord}>\n            Show me <b>C Maj</b> chord\n          </button>\n        </div>\n        <div className=\"cleanFretboard\">\n          <button onClick={this.cleanAll}>Clean all fretboard</button>\n        </div>\n\n        <form>\n          <Fretboard\n            neckboardSchemas={{\n              fretsPerString: 12,\n              strings: [\n                { name: \"G\", octave: 2 },\n                { name: \"D\", octave: 2 },\n                { name: \"A\", octave: 1 },\n                { name: \"E\", octave: 1 }\n              ]\n            }}\n            notesToDisplay={this.state.chordToDisplay}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}